//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 5/6/2015 8:55:48 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace MfinderContext
{

    [DatabaseAttribute(Name = "mfinder")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class MfinderDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(MfinderDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertAction(Action instance);
        partial void UpdateAction(Action instance);
        partial void DeleteAction(Action instance);
        partial void InsertDpto(Dpto instance);
        partial void UpdateDpto(Dpto instance);
        partial void DeleteDpto(Dpto instance);
        partial void InsertLocation(Location instance);
        partial void UpdateLocation(Location instance);
        partial void DeleteLocation(Location instance);
        partial void InsertMachine(Machine instance);
        partial void UpdateMachine(Machine instance);
        partial void DeleteMachine(Machine instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);

        #endregion

        public MfinderDataContext() :
        base(GetConnectionString("MfinderDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public MfinderDataContext(MappingSource mappingSource) :
        base(GetConnectionString("MfinderDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public MfinderDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MfinderDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MfinderDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MfinderDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Action> Actions
        {
            get
            {
                return this.GetTable<Action>();
            }
        }

        public Devart.Data.Linq.Table<Dpto> Dptos
        {
            get
            {
                return this.GetTable<Dpto>();
            }
        }

        public Devart.Data.Linq.Table<History> Histories
        {
            get
            {
                return this.GetTable<History>();
            }
        }

        public Devart.Data.Linq.Table<Location> Locations
        {
            get
            {
                return this.GetTable<Location>();
            }
        }

        public Devart.Data.Linq.Table<Machine> Machines
        {
            get
            {
                return this.GetTable<Machine>();
            }
        }

        public Devart.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }
    }
}

namespace MfinderContext
{

    /// <summary>
    /// There are no comments for MfinderContext.Action in the schema.
    /// </summary>
    [Table(Name = @"mfinder.`action`")]
    public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Action()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for MfinderContext.Dpto in the schema.
    /// </summary>
    [Table(Name = @"mfinder.dpto")]
    public partial class Dpto : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;
        #pragma warning restore 0649

        private EntitySet<Location> _Locations;

        private EntitySet<User> _Users;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Dpto()
        {
            this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
            this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Locations in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Dpto_Location", Storage="_Locations", ThisKey="Id", OtherKey="DptoFk", DeleteRule="NO ACTION")]
        public EntitySet<Location> Locations
        {
            get
            {
                return this._Locations;
            }
            set
            {
                this._Locations.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Users in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Dpto_User", Storage="_Users", ThisKey="Id", OtherKey="DptoFk", DeleteRule="NO ACTION")]
        public EntitySet<User> Users
        {
            get
            {
                return this._Users;
            }
            set
            {
                this._Users.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Locations(Location entity)
        {
            this.SendPropertyChanging("Locations");
            entity.Dpto = this;
        }
    
        private void detach_Locations(Location entity)
        {
            this.SendPropertyChanging("Locations");
            entity.Dpto = null;
        }

        private void attach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Dpto = this;
        }
    
        private void detach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Dpto = null;
        }
    }

    /// <summary>
    /// There are no comments for MfinderContext.History in the schema.
    /// </summary>
    [Table(Name = @"mfinder.history")]
    public partial class History
    {
        #pragma warning disable 0649

        private int _ActionFk;

        private System.Nullable<int> _UserFk;

        private System.Nullable<int> _MachineFk;

        private System.Nullable<int> _DptoFk;

        private string _Comment;

        private System.Nullable<System.DateTime> _ActionDate;

        private System.Nullable<int> _TechnicalFk;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnActionFkChanging(int value);
        partial void OnActionFkChanged();
        partial void OnUserFkChanging(System.Nullable<int> value);
        partial void OnUserFkChanged();
        partial void OnMachineFkChanging(System.Nullable<int> value);
        partial void OnMachineFkChanged();
        partial void OnDptoFkChanging(System.Nullable<int> value);
        partial void OnDptoFkChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnActionDateChanging(System.Nullable<System.DateTime> value);
        partial void OnActionDateChanged();
        partial void OnTechnicalFkChanging(System.Nullable<int> value);
        partial void OnTechnicalFkChanged();
        #endregion

        public History()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ActionFk in the schema.
        /// </summary>
        [Column(Name = @"action_fk", Storage = "_ActionFk", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ActionFk
        {
            get
            {
                return this._ActionFk;
            }
            set
            {
                if (this._ActionFk != value)
                {
                    this._ActionFk = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserFk in the schema.
        /// </summary>
        [Column(Name = @"user_fk", Storage = "_UserFk", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> UserFk
        {
            get
            {
                return this._UserFk;
            }
            set
            {
                if (this._UserFk != value)
                {
                    this._UserFk = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MachineFk in the schema.
        /// </summary>
        [Column(Name = @"machine_fk", Storage = "_MachineFk", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MachineFk
        {
            get
            {
                return this._MachineFk;
            }
            set
            {
                if (this._MachineFk != value)
                {
                    this._MachineFk = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DptoFk in the schema.
        /// </summary>
        [Column(Name = @"dpto_fk", Storage = "_DptoFk", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DptoFk
        {
            get
            {
                return this._DptoFk;
            }
            set
            {
                if (this._DptoFk != value)
                {
                    this._DptoFk = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comment in the schema.
        /// </summary>
        [Column(Name = @"`comment`", Storage = "_Comment", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if (this._Comment != value)
                {
                    this._Comment = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ActionDate in the schema.
        /// </summary>
        [Column(Name = @"actionDate", Storage = "_ActionDate", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ActionDate
        {
            get
            {
                return this._ActionDate;
            }
            set
            {
                if (this._ActionDate != value)
                {
                    this._ActionDate = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TechnicalFk in the schema.
        /// </summary>
        [Column(Name = @"technical_fk", Storage = "_TechnicalFk", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TechnicalFk
        {
            get
            {
                return this._TechnicalFk;
            }
            set
            {
                if (this._TechnicalFk != value)
                {
                    this._TechnicalFk = value;
                }
            }
        }
    }

    /// <summary>
    /// There are no comments for MfinderContext.Location in the schema.
    /// </summary>
    [Table(Name = @"mfinder.location")]
    public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _UserFk;

        private System.Nullable<int> _DptoFk;

        private int _MachineFk;

        private string _Comment;

        private System.Nullable<int> _TechnicalFk;

        private System.DateTime _LoanDate;

        private System.Nullable<System.DateTime> _DevolutionDate;
        #pragma warning restore 0649

        private EntityRef<Dpto> _Dpto;

        private EntityRef<Machine> _Machine;

        private EntityRef<User> _User_TechnicalFk;

        private EntityRef<User> _User_UserFk;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnUserFkChanging(System.Nullable<int> value);
        partial void OnUserFkChanged();
        partial void OnDptoFkChanging(System.Nullable<int> value);
        partial void OnDptoFkChanged();
        partial void OnMachineFkChanging(int value);
        partial void OnMachineFkChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnTechnicalFkChanging(System.Nullable<int> value);
        partial void OnTechnicalFkChanged();
        partial void OnLoanDateChanging(System.DateTime value);
        partial void OnLoanDateChanged();
        partial void OnDevolutionDateChanging(System.Nullable<System.DateTime> value);
        partial void OnDevolutionDateChanged();
        #endregion

        public Location()
        {
            this._Dpto  = default(EntityRef<Dpto>);
            this._Machine  = default(EntityRef<Machine>);
            this._User_TechnicalFk  = default(EntityRef<User>);
            this._User_UserFk  = default(EntityRef<User>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserFk in the schema.
        /// </summary>
        [Column(Name = @"user_fk", Storage = "_UserFk", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> UserFk
        {
            get
            {
                return this._UserFk;
            }
            set
            {
                if (this._UserFk != value)
                {
                    if (this._User_UserFk.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserFkChanging(value);
                    this.SendPropertyChanging();
                    this._UserFk = value;
                    this.SendPropertyChanged("UserFk");
                    this.OnUserFkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DptoFk in the schema.
        /// </summary>
        [Column(Name = @"dpto_fk", Storage = "_DptoFk", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DptoFk
        {
            get
            {
                return this._DptoFk;
            }
            set
            {
                if (this._DptoFk != value)
                {
                    if (this._Dpto.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDptoFkChanging(value);
                    this.SendPropertyChanging();
                    this._DptoFk = value;
                    this.SendPropertyChanged("DptoFk");
                    this.OnDptoFkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MachineFk in the schema.
        /// </summary>
        [Column(Name = @"machine_fk", Storage = "_MachineFk", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int MachineFk
        {
            get
            {
                return this._MachineFk;
            }
            set
            {
                if (this._MachineFk != value)
                {
                    if (this._Machine.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMachineFkChanging(value);
                    this.SendPropertyChanging();
                    this._MachineFk = value;
                    this.SendPropertyChanged("MachineFk");
                    this.OnMachineFkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comment in the schema.
        /// </summary>
        [Column(Name = @"`comment`", Storage = "_Comment", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if (this._Comment != value)
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging();
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TechnicalFk in the schema.
        /// </summary>
        [Column(Name = @"technical_fk", Storage = "_TechnicalFk", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TechnicalFk
        {
            get
            {
                return this._TechnicalFk;
            }
            set
            {
                if (this._TechnicalFk != value)
                {
                    if (this._User_TechnicalFk.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTechnicalFkChanging(value);
                    this.SendPropertyChanging();
                    this._TechnicalFk = value;
                    this.SendPropertyChanged("TechnicalFk");
                    this.OnTechnicalFkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoanDate in the schema.
        /// </summary>
        [Column(Name = @"loanDate", Storage = "_LoanDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime LoanDate
        {
            get
            {
                return this._LoanDate;
            }
            set
            {
                if (this._LoanDate != value)
                {
                    this.OnLoanDateChanging(value);
                    this.SendPropertyChanging();
                    this._LoanDate = value;
                    this.SendPropertyChanged("LoanDate");
                    this.OnLoanDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevolutionDate in the schema.
        /// </summary>
        [Column(Name = @"devolutionDate", Storage = "_DevolutionDate", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> DevolutionDate
        {
            get
            {
                return this._DevolutionDate;
            }
            set
            {
                if (this._DevolutionDate != value)
                {
                    this.OnDevolutionDateChanging(value);
                    this.SendPropertyChanging();
                    this._DevolutionDate = value;
                    this.SendPropertyChanged("DevolutionDate");
                    this.OnDevolutionDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dpto in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Dpto_Location", Storage="_Dpto", ThisKey="DptoFk", OtherKey="Id", IsForeignKey=true)]
        public Dpto Dpto
        {
            get
            {
                return this._Dpto.Entity;
            }
            set
            {
                Dpto previousValue = this._Dpto.Entity;
                if ((previousValue != value) || (this._Dpto.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dpto.Entity = null;
                        previousValue.Locations.Remove(this);
                    }
                    this._Dpto.Entity = value;
                    if (value != null)
                    {
                        this._DptoFk = value.Id;
                        value.Locations.Add(this);
                    }
                    else
                    {
                        this._DptoFk = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Dpto");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Machine in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Machine_Location", Storage="_Machine", ThisKey="MachineFk", OtherKey="Id", IsForeignKey=true)]
        public Machine Machine
        {
            get
            {
                return this._Machine.Entity;
            }
            set
            {
                Machine previousValue = this._Machine.Entity;
                if ((previousValue != value) || (this._Machine.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Machine.Entity = null;
                        previousValue.Locations.Remove(this);
                    }
                    this._Machine.Entity = value;
                    if (value != null)
                    {
                        this._MachineFk = value.Id;
                        value.Locations.Add(this);
                    }
                    else
                    {
                        this._MachineFk = default(int);
                    }
                    this.SendPropertyChanged("Machine");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User_TechnicalFk in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Location", Storage="_User_TechnicalFk", ThisKey="TechnicalFk", OtherKey="Id", IsForeignKey=true)]
        public User User_TechnicalFk
        {
            get
            {
                return this._User_TechnicalFk.Entity;
            }
            set
            {
                User previousValue = this._User_TechnicalFk.Entity;
                if ((previousValue != value) || (this._User_TechnicalFk.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._User_TechnicalFk.Entity = null;
                        previousValue.Locations_TechnicalFk.Remove(this);
                    }
                    this._User_TechnicalFk.Entity = value;
                    if (value != null)
                    {
                        this._TechnicalFk = value.Id;
                        value.Locations_TechnicalFk.Add(this);
                    }
                    else
                    {
                        this._TechnicalFk = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("User_TechnicalFk");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User_UserFk in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Location1", Storage="_User_UserFk", ThisKey="UserFk", OtherKey="Id", IsForeignKey=true)]
        public User User_UserFk
        {
            get
            {
                return this._User_UserFk.Entity;
            }
            set
            {
                User previousValue = this._User_UserFk.Entity;
                if ((previousValue != value) || (this._User_UserFk.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._User_UserFk.Entity = null;
                        previousValue.Locations_UserFk.Remove(this);
                    }
                    this._User_UserFk.Entity = value;
                    if (value != null)
                    {
                        this._UserFk = value.Id;
                        value.Locations_UserFk.Add(this);
                    }
                    else
                    {
                        this._UserFk = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("User_UserFk");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for MfinderContext.Machine in the schema.
    /// </summary>
    [Table(Name = @"mfinder.machine")]
    public partial class Machine : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Model;

        private string _Serialnumber;

        private string _Name;

        private System.Nullable<System.DateTime> _AquisitionDate;

        private System.Nullable<System.DateTime> _WarrantyExpirationDate;
        #pragma warning restore 0649

        private EntitySet<Location> _Locations;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnSerialnumberChanging(string value);
        partial void OnSerialnumberChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnAquisitionDateChanging(System.Nullable<System.DateTime> value);
        partial void OnAquisitionDateChanged();
        partial void OnWarrantyExpirationDateChanging(System.Nullable<System.DateTime> value);
        partial void OnWarrantyExpirationDateChanged();
        #endregion

        public Machine()
        {
            this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Model in the schema.
        /// </summary>
        [Column(Name = @"model", Storage = "_Model", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Model
        {
            get
            {
                return this._Model;
            }
            set
            {
                if (this._Model != value)
                {
                    this.OnModelChanging(value);
                    this.SendPropertyChanging();
                    this._Model = value;
                    this.SendPropertyChanged("Model");
                    this.OnModelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Serialnumber in the schema.
        /// </summary>
        [Column(Name = @"serialnumber", Storage = "_Serialnumber", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Serialnumber
        {
            get
            {
                return this._Serialnumber;
            }
            set
            {
                if (this._Serialnumber != value)
                {
                    this.OnSerialnumberChanging(value);
                    this.SendPropertyChanging();
                    this._Serialnumber = value;
                    this.SendPropertyChanged("Serialnumber");
                    this.OnSerialnumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AquisitionDate in the schema.
        /// </summary>
        [Column(Name = @"aquisitionDate", Storage = "_AquisitionDate", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> AquisitionDate
        {
            get
            {
                return this._AquisitionDate;
            }
            set
            {
                if (this._AquisitionDate != value)
                {
                    this.OnAquisitionDateChanging(value);
                    this.SendPropertyChanging();
                    this._AquisitionDate = value;
                    this.SendPropertyChanged("AquisitionDate");
                    this.OnAquisitionDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WarrantyExpirationDate in the schema.
        /// </summary>
        [Column(Name = @"warrantyExpirationDate", Storage = "_WarrantyExpirationDate", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> WarrantyExpirationDate
        {
            get
            {
                return this._WarrantyExpirationDate;
            }
            set
            {
                if (this._WarrantyExpirationDate != value)
                {
                    this.OnWarrantyExpirationDateChanging(value);
                    this.SendPropertyChanging();
                    this._WarrantyExpirationDate = value;
                    this.SendPropertyChanged("WarrantyExpirationDate");
                    this.OnWarrantyExpirationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Locations in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Machine_Location", Storage="_Locations", ThisKey="Id", OtherKey="MachineFk", DeleteRule="NO ACTION")]
        public EntitySet<Location> Locations
        {
            get
            {
                return this._Locations;
            }
            set
            {
                this._Locations.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Locations(Location entity)
        {
            this.SendPropertyChanging("Locations");
            entity.Machine = this;
        }
    
        private void detach_Locations(Location entity)
        {
            this.SendPropertyChanging("Locations");
            entity.Machine = null;
        }
    }

    /// <summary>
    /// There are no comments for MfinderContext.Role in the schema.
    /// </summary>
    [Table(Name = @"mfinder.role")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;
        #pragma warning restore 0649

        private EntitySet<User> _Users;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Role()
        {
            this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Users in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User", Storage="_Users", ThisKey="Id", OtherKey="RoleFk", DeleteRule="NO ACTION")]
        public EntitySet<User> Users
        {
            get
            {
                return this._Users;
            }
            set
            {
                this._Users.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = this;
        }
    
        private void detach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = null;
        }
    }

    /// <summary>
    /// There are no comments for MfinderContext.User in the schema.
    /// </summary>
    [Table(Name = @"mfinder.user")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Firstname;

        private string _Ramal;

        private int _RoleFk;

        private System.Nullable<int> _DptoFk;

        private string _Password;

        private string _Lastname;

        private string _Username;

        private System.Nullable<int> _Active;
        #pragma warning restore 0649

        private EntitySet<Location> _Locations_TechnicalFk;

        private EntitySet<Location> _Locations_UserFk;

        private EntityRef<Dpto> _Dpto;

        private EntityRef<Role> _Role;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnFirstnameChanging(string value);
        partial void OnFirstnameChanged();
        partial void OnRamalChanging(string value);
        partial void OnRamalChanged();
        partial void OnRoleFkChanging(int value);
        partial void OnRoleFkChanged();
        partial void OnDptoFkChanging(System.Nullable<int> value);
        partial void OnDptoFkChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnLastnameChanging(string value);
        partial void OnLastnameChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnActiveChanging(System.Nullable<int> value);
        partial void OnActiveChanged();
        #endregion

        public User()
        {
            this._Locations_TechnicalFk = new EntitySet<Location>(new Action<Location>(this.attach_Locations_TechnicalFk), new Action<Location>(this.detach_Locations_TechnicalFk));
            this._Locations_UserFk = new EntitySet<Location>(new Action<Location>(this.attach_Locations_UserFk), new Action<Location>(this.detach_Locations_UserFk));
            this._Dpto  = default(EntityRef<Dpto>);
            this._Role  = default(EntityRef<Role>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Firstname in the schema.
        /// </summary>
        [Column(Name = @"firstname", Storage = "_Firstname", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Firstname
        {
            get
            {
                return this._Firstname;
            }
            set
            {
                if (this._Firstname != value)
                {
                    this.OnFirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._Firstname = value;
                    this.SendPropertyChanged("Firstname");
                    this.OnFirstnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ramal in the schema.
        /// </summary>
        [Column(Name = @"ramal", Storage = "_Ramal", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ramal
        {
            get
            {
                return this._Ramal;
            }
            set
            {
                if (this._Ramal != value)
                {
                    this.OnRamalChanging(value);
                    this.SendPropertyChanging();
                    this._Ramal = value;
                    this.SendPropertyChanged("Ramal");
                    this.OnRamalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleFk in the schema.
        /// </summary>
        [Column(Name = @"role_fk", Storage = "_RoleFk", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int RoleFk
        {
            get
            {
                return this._RoleFk;
            }
            set
            {
                if (this._RoleFk != value)
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRoleFkChanging(value);
                    this.SendPropertyChanging();
                    this._RoleFk = value;
                    this.SendPropertyChanged("RoleFk");
                    this.OnRoleFkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DptoFk in the schema.
        /// </summary>
        [Column(Name = @"dpto_fk", Storage = "_DptoFk", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DptoFk
        {
            get
            {
                return this._DptoFk;
            }
            set
            {
                if (this._DptoFk != value)
                {
                    if (this._Dpto.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDptoFkChanging(value);
                    this.SendPropertyChanging();
                    this._DptoFk = value;
                    this.SendPropertyChanged("DptoFk");
                    this.OnDptoFkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"`password`", Storage = "_Password", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Lastname in the schema.
        /// </summary>
        [Column(Name = @"lastname", Storage = "_Lastname", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Lastname
        {
            get
            {
                return this._Lastname;
            }
            set
            {
                if (this._Lastname != value)
                {
                    this.OnLastnameChanging(value);
                    this.SendPropertyChanging();
                    this._Lastname = value;
                    this.SendPropertyChanged("Lastname");
                    this.OnLastnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Username in the schema.
        /// </summary>
        [Column(Name = @"username", Storage = "_Username", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [Column(Name = @"active", Storage = "_Active", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Locations_TechnicalFk in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Location", Storage="_Locations_TechnicalFk", ThisKey="Id", OtherKey="TechnicalFk", DeleteRule="NO ACTION")]
        public EntitySet<Location> Locations_TechnicalFk
        {
            get
            {
                return this._Locations_TechnicalFk;
            }
            set
            {
                this._Locations_TechnicalFk.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Locations_UserFk in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Location1", Storage="_Locations_UserFk", ThisKey="Id", OtherKey="UserFk", DeleteRule="NO ACTION")]
        public EntitySet<Location> Locations_UserFk
        {
            get
            {
                return this._Locations_UserFk;
            }
            set
            {
                this._Locations_UserFk.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Dpto in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Dpto_User", Storage="_Dpto", ThisKey="DptoFk", OtherKey="Id", IsForeignKey=true)]
        public Dpto Dpto
        {
            get
            {
                return this._Dpto.Entity;
            }
            set
            {
                Dpto previousValue = this._Dpto.Entity;
                if ((previousValue != value) || (this._Dpto.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dpto.Entity = null;
                        previousValue.Users.Remove(this);
                    }
                    this._Dpto.Entity = value;
                    if (value != null)
                    {
                        this._DptoFk = value.Id;
                        value.Users.Add(this);
                    }
                    else
                    {
                        this._DptoFk = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Dpto");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Role in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User", Storage="_Role", ThisKey="RoleFk", OtherKey="Id", IsForeignKey=true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if ((previousValue != value) || (this._Role.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Role.Entity = null;
                        previousValue.Users.Remove(this);
                    }
                    this._Role.Entity = value;
                    if (value != null)
                    {
                        this._RoleFk = value.Id;
                        value.Users.Add(this);
                    }
                    else
                    {
                        this._RoleFk = default(int);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Locations_TechnicalFk(Location entity)
        {
            this.SendPropertyChanging("Locations_TechnicalFk");
            entity.User_TechnicalFk = this;
        }
    
        private void detach_Locations_TechnicalFk(Location entity)
        {
            this.SendPropertyChanging("Locations_TechnicalFk");
            entity.User_TechnicalFk = null;
        }

        private void attach_Locations_UserFk(Location entity)
        {
            this.SendPropertyChanging("Locations_UserFk");
            entity.User_UserFk = this;
        }
    
        private void detach_Locations_UserFk(Location entity)
        {
            this.SendPropertyChanging("Locations_UserFk");
            entity.User_UserFk = null;
        }
    }

}
